import java.nio.file.Files

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'

project.ext {
    buildNum = System.getenv("BUILD_NUMBER")
    mcVersion = "${project.minecraft.version}"
    sarVersion = "${steamagerevolutionversion}-${project.ext.buildNum}"
}

version = "${minecraftversion}-" + project.ext.sarVersion
group = "brassgoggledcoders"
archivesBaseName = "steamagerevolution"

minecraft {
    version = "${minecraftversion}-${forgeversion}"
    mappings = "${mappingsversion}"
    useDepAts = true
    runDir = "run/"
    useDepAts = true

    replace "@VERSION@", project.ext.sarVersion
    replaceIn "SteamAgeRevolution.java"
}

compileJava {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

repositories {
    mavenLocal()
    maven {
        name "K4Repo"
        url "http://maven.k-4u.nl"
    }
    maven {
        name = "Modmuss50"
        url = "http://maven.modmuss50.me/"
    }
    maven {
        name "JEI"
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        name "MCMultiPart"
        url "http://maven.amadornes.com/"
    }
}

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    shade "brassgoggledcoders:boilerplate:${minecraftversion}-${boilerplateversion}:lib"
    deobfCompile "mezz.jei:jei_${minecraftversion}:${jeiversion}"
    deobfCompile "MCMultiPart:MCMultiPart:${mcmultipartversion}:universal"
}

runClient {
    if(project.hasProperty('mcUsername') && project.hasProperty('mcPassword') ) {
        args += "--username=${project.mcUsername}"
        args += "--password=${project.mcPassword}"
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

idea {
    module {
        inheritOutputDirs = true
    }
}

reobfJar {
    addExtraSrgLine "PK: xyz/brassgoggledcoders/boilerplate xyz/brassgoggledcoders/steamagerevolution/boilerplate"
}

jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**', 'mcmod.info'
        }
    }
    classifier = ""
}

task deobfJar(type: Jar) {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)){
            exclude 'META-INF', 'META-INF/**'
        }
    }
    from(sourceSets.main.output) {
        classifier = "deobf"
    }
}

artifacts {
    archives deobfJar
}

task("uploadJars", dependsOn: "reobf") {
    description = "uploads JARs"
    if (System.getenv("local_maven") != null) {
        apply plugin: 'maven'
        uploadArchives {
            repositories {
                mavenDeployer {
                    repository(url: "file://" + System.getenv("local_maven"))
                    pom {
                        groupId = project.group
                        version
                        artifactId = project.archivesBaseName
                        project {
                            name project.archivesBaseName
                            packaging 'jar'
                            description 'SteamAgeRevolution'
                            url 'http://BrassGoggledCoders.xyz'
                            scm {
                                url 'https://github.com/BrassGoggledCoders/SteamAgeRevolution.git'
                                connection 'scm:git:git@github.com:BrassGoggledCoders/SteamAGeRevolution.git'
                                developerConnection 'scm:git:git@github.com:BrassGoggledCoders/SteamAgeRevolution.git'
                            }
                            issueManagement {
                                system 'github'
                                url 'https://github.com/BrassGoggledCoders/SteamAgeRevolution/issues'
                            }
                            licenses {
                                license {
                                    name 'MIT'
                                    url 'https://github.com/BrassGoggledCoders/SteamAgeRevolution/blob/master/LICENSE'
                                    distribution 'repo'
                                }
                            }
                            developers {
                                developer {
                                    id 'SkySom'
                                    name 'SkySom'
                                    roles { role 'developer' }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

def createItemJSON() {
    File modelDirectory = new File("./src/main/resources/assets/steamagerevolution/models")
    File itemModelDirectory = new File("./src/main/resources/assets/steamagerevolution/models/item")
    if(!modelDirectory.exists()) modelDirectory.mkdir()
    if(!itemModelDirectory.exists()) itemModelDirectory.mkdir()

    File textureDirectory = new File("./src/main/resources/assets/steamagerevolution/textures/items")

    createJSONsForTextures(textureDirectory, "")
}

def createJSONsForTextures(File directory, String directoryPath) {
    for(File file: directory.listFiles()) {
        if(file.isDirectory()) {
            String newDirectoryPath = directoryPath;

            if(!newDirectoryPath.isEmpty()) {
                newDirectoryPath += "/"
            }
            newDirectoryPath += file.name

            String newDirectoryPathFileString = ".\\src\\main\\resources\\assets\\steamagerevolution\\models\\item\\" + newDirectoryPath
            File newDirectoryPathFile = new File(newDirectoryPathFileString);
            if(!newDirectoryPathFile.exists()) {
                newDirectoryPathFile.mkdir();
            }

            createJSONsForTextures(file, newDirectoryPath)
        } else {
            String fileName = file.name
            String newFileName = ""
            for (Character aChar : fileName.toCharArray()) {
                if (Character.isUpperCase(aChar)) {
                    newFileName += "_" + aChar.toString().toLowerCase()
                } else {
                    newFileName += aChar
                }
            }

            if (newFileName.startsWith("item")) {
                newFileName = newFileName.replaceFirst("item", "")
            }
            if (newFileName.startsWith("_")) {
                newFileName = newFileName.replaceFirst("_", "")
            }

            Files.move(file.toPath(), file.toPath().resolveSibling(newFileName));

            newFileName = newFileName.replace(".png", "")
            newFileName = newFileName.replace(".mcmeta", "")

            if (!directoryPath.isEmpty() && !(directoryPath.endsWith("\\") || directoryPath.endsWith("/"))) {
                directoryPath += "\\";
            }
            String fileLocation = ".\\src\\main\\resources\\assets\\steamagerevolution\\models\\item\\" + directoryPath +
                    newFileName.toString() + ".json"
            println(fileLocation)
            File jsonFile = new File(fileLocation);
            if (!jsonFile.exists()) {
                directoryPath = directoryPath.replace("\\", "/")
                jsonFile.createNewFile();
                String jsonString = '''{
    "parent":"builtin/generated",
    "textures":{
        "layer0":"''' + archivesBaseName + ":items/" + directoryPath + newFileName + '''"
    },
    "display": {
        "thirdperson": {
            "rotation": [ -90, 0, 0 ],
            "translation": [ 0, 1, -3 ],
            "scale": [ 0.55, 0.55, 0.55 ]
        },
        "firstperson": {
            "rotation": [ 0, -135, 25 ],
            "translation": [ 0, 4, 2 ],
            "scale": [ 1.7, 1.7, 1.7 ]
        }
    }
}
'''
                jsonFile << jsonString
            }
        }
    }
}
