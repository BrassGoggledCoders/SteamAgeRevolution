/*
		 * itemRegistry.register(new ItemGun()); itemRegistry.register(new
		 * ItemAmmo("iron_ball", AmmoType.BALL, 2)); itemRegistry.register(new
		 * ItemAmmo("cartridge", AmmoType.CARTRIDGE, 5)); itemRegistry.register(new
		 * ItemMechanism("bolt_mechanism", ActionType.BOLT) {
		 *
		 * @Override public ActionResult<ItemStack> onItemRightClick(World worldIn,
		 * EntityPlayer playerIn, EnumHand handIn) { ItemStack stack =
		 * playerIn.getHeldItem(handIn);
		 * if(GunUtils.getOrCreateTagCompound(stack).getBoolean("isLoaded")) {
		 * GunUtils.shoot(worldIn, playerIn, stack);
		 * stack.getTagCompound().setBoolean("isLoaded", false); } return
		 * super.onItemRightClick(worldIn, playerIn, handIn); } });
		 * itemRegistry.register(new ItemMechanism("semi_mechanism", ActionType.SEMI) {
		 *
		 * @Override public ActionResult<ItemStack> onItemRightClick(World worldIn,
		 * EntityPlayer playerIn, EnumHand handIn) { ItemStack stack =
		 * playerIn.getHeldItem(handIn);
		 * if(GunUtils.getOrCreateTagCompound(stack).getBoolean("isLoaded")) {
		 * GunUtils.shoot(worldIn, playerIn, stack); ItemStack ammo =
		 * GunUtils.findAmmo(playerIn, stack); if(!ammo.isEmpty()) { ammo.shrink(1);
		 * GunUtils.getOrCreateTagCompound(stack).setBoolean("isLoaded", true); } }
		 * return super.onItemRightClick(worldIn, playerIn, handIn); } });
		 * itemRegistry.register(new ItemMechanism("auto_mechanism", ActionType.AUTO) {
		 *
		 * @Override public ActionResult<ItemStack> onItemRightClick(World worldIn,
		 * EntityPlayer playerIn, EnumHand handIn) { playerIn.setActiveHand(handIn);
		 * return new ActionResult<ItemStack>(EnumActionResult.PASS,
		 * playerIn.getHeldItem(handIn)); }
		 *
		 * @Override public void onUsingTick(ItemStack stack, EntityLivingBase
		 * entityLiving, int count) { ItemStack ammo = GunUtils.findAmmo((EntityPlayer)
		 * entityLiving, stack); if(!ammo.isEmpty()) { ammo.shrink(1);
		 * GunUtils.shoot(entityLiving.getEntityWorld(), entityLiving, stack); } } });
		 * itemRegistry.register(new ItemBarrel("short_barrel", 0, 0));
		 * itemRegistry.register(new ItemBarrel("blunderbuss_barrel", -1.5F, 10));
		 * itemRegistry.register(new ItemStock("standard_stock", 0.7F));
		 * itemRegistry.register(new ItemStock("heavy_stock", 0.9F)); // TODO Slime
		 * stock itemRegistry.register(new ItemChamber("ball_chamber", AmmoType.BALL));
		 * itemRegistry.register(new ItemChamber("cartidge_chamber",
		 * AmmoType.CARTRIDGE)); // itemRegistry.register(new
		 * ItemAmmoContainer("cartridge_clip", 5, // AmmoType.CARTRIDGE));
		 *
		 */

// hydraulicTube = new BlockHydraulicTube(Material.IRON, "hydraulic_tube");
		// // blockRegistry.register(hydraulicTube);
		// hydraulicSender = new BlockHydraulicSender(Material.IRON,
		// "hydraulic_sender");
		// // blockRegistry.register(hydraulicSender);
		// hydraulicRouter = new BlockHydraulicRouter(Material.IRON,
		// "hydraulic_router");
		// // blockRegistry.register(hydraulicRouter);

		// blockRegistry.register(new BlockSorterInput(Material.IRON, "sorter_input"));
		// blockRegistry.register(new BlockSorterOutput(Material.IRON,
		// "sorter_output"));
		// blockRegistry.register(new BlockSorterFrame(Material.IRON, "sorter_frame"));
		// blockRegistry.register(new BlockSorterBrain(Material.IRON, "sorter_brain"));
		//
		// blockRegistry.register(new BlockCardPuncher(Material.IRON, "card_puncher"));


// Fluid liquid_explosive =
		// new Fluid("liquid_explosive", new ResourceLocation(SteamAgeRevolution.MODID,
		// "fluids/liquid_explosive"),
		// new ResourceLocation(SteamAgeRevolution.MODID, "fluids/liquid_explosive"));
		// FluidRegistry.registerFluid(liquid_explosive);

/*
		 * Fluid incense = new Fluid("incense", new
		 * ResourceLocation(SteamAgeRevolution.MODID, "fluids/incense"), new
		 * ResourceLocation(SteamAgeRevolution.MODID,
		 * "fluids/incense_flow")).setGaseous(true).setDensity(-100)
		 * .setViscosity(-100);
		 *
		 * if(!(FluidRegistry.isFluidRegistered(incense))) { // Soft registration
		 * FluidRegistry.registerFluid(incense);
		 * FluidRegistry.addBucketForFluid(incense); } blockRegistry.register(new
		 * BlockIncenseFluid("incense", FluidRegistry.getFluid("incense"),
		 * Material.WATER) {
		 *
		 * @Override public ResourceLocation getResourceLocation(IBlockState blockState)
		 * { return new ResourceLocation(SteamAgeRevolution.MODID, "incense"); } });
		 * blockRegistry.register(new BlockIncense()); blockRegistry.register(new
		 * BlockIncenseSpray()); blockRegistry.register(new BlockIncenseBurner());
		 */
